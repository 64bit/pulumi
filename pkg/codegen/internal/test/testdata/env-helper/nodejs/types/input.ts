// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import * as utilities from "../utilities";

/**
 * BETA FEATURE - Options to configure the Helm Release resource.
 */
export interface HelmReleaseSettingsArgs {
    /**
     * The backend storage driver for Helm. Values are: configmap, secret, memory, sql.
     */
    driver?: pulumi.Input<string>;
    /**
     * The path to the helm plugins directory.
     */
    pluginsPath?: pulumi.Input<string>;
    /**
     * to test required args
     */
    requiredArg: pulumi.Input<string>;
}
/**
 * helmReleaseSettingsArgsProvideDefaults sets the appropriate defaults for HelmReleaseSettingsArgs
 */
export function helmReleaseSettingsArgsProvideDefaults(val: pulumi.Input<HelmReleaseSettingsArgs> | undefined): pulumi.Output<HelmReleaseSettingsArgs> | undefined {
    const def = (val: HelmReleaseSettingsArgs) => ({
        ...val,
        driver: (val.driver) ?? (utilities.getEnv("PULUMI_K8S_HELM_DRIVER") || "secret"),
        pluginsPath: (val.pluginsPath) ?? utilities.getEnv("PULUMI_K8S_HELM_PLUGINS_PATH"),
    });
    return val ? pulumi.output(val).apply(def) : undefined;
}

/**
 * Options for tuning the Kubernetes client used by a Provider.
 */
export interface KubeClientSettingsArgs {
    /**
     * Maximum burst for throttle. Default value is 10.
     */
    burst?: pulumi.Input<number>;
    /**
     * Maximum queries per second (QPS) to the API server from this client. Default value is 5.
     */
    qps?: pulumi.Input<number>;
}
/**
 * kubeClientSettingsArgsProvideDefaults sets the appropriate defaults for KubeClientSettingsArgs
 */
export function kubeClientSettingsArgsProvideDefaults(val: pulumi.Input<KubeClientSettingsArgs> | undefined): pulumi.Output<KubeClientSettingsArgs> | undefined {
    const def = (val: KubeClientSettingsArgs) => ({
        ...val,
        burst: (val.burst) ?? utilities.getEnvNumber("PULUMI_K8S_CLIENT_BURST"),
        qps: (val.qps) ?? utilities.getEnvNumber("PULUMI_K8S_CLIENT_QPS"),
    });
    return val ? pulumi.output(val).apply(def) : undefined;
}

/**
 * Make sure that defaults propagate through types
 */
export interface LayeredTypeArgs {
    /**
     * The answer to the question
     */
    answer?: pulumi.Input<number>;
    other: pulumi.Input<inputs.HelmReleaseSettingsArgs>;
    /**
     * Test how plain types interact
     */
    plainOther?: inputs.HelmReleaseSettingsArgs;
    /**
     * The question already answered
     */
    question?: pulumi.Input<string>;
    recursive?: pulumi.Input<inputs.LayeredTypeArgs>;
    /**
     * To ask and answer
     */
    thinker: pulumi.Input<string>;
}
/**
 * layeredTypeArgsProvideDefaults sets the appropriate defaults for LayeredTypeArgs
 */
export function layeredTypeArgsProvideDefaults(val: pulumi.Input<LayeredTypeArgs> | undefined): pulumi.Output<LayeredTypeArgs> | undefined {
    const def = (val: LayeredTypeArgs) => ({
        ...val,
        answer: (val.answer) ?? 42,
        other: inputs.helmReleaseSettingsArgsProvideDefaults(val.other)!,
        plainOther: inputs.helmReleaseSettingsArgsProvideDefaults(val.plainOther),
        question: (val.question) ?? (utilities.getEnv("PULUMI_THE_QUESTION") || "<unknown>"),
        recursive: inputs.layeredTypeArgsProvideDefaults(val.recursive),
        thinker: (val.thinker) ?? "not a good interaction",
    });
    return val ? pulumi.output(val).apply(def) : undefined;
}
