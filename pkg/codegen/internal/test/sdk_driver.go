package test

import (
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	//"github.com/pulumi/pulumi/pkg/v3/codegen"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type SdkTest struct {
	// Short name of the directory, relative to `TestDir`.
	Directory string

	Description string

	// Decides which programming languages to test the code
	// generation for; defaults to all supported languages.
	IncludeLanguage func(lang string) bool

	// Hooks that run additional validations after the code has
	// been generated. Hooks are usually language-specific and are
	// included in this map by language.
	HooksByLanguage map[string][]SdkTestHook
}

type SdkTestHook struct {
	// Name such as "compile", "test".
	Name string

	// Checks to run.
	RunHook func(env *SdkTestEnv)
}

type SdkTestEnv struct {
	T *testing.T

	// The directory with the generated code, typically `$TestDir/$Language`.
	CodeDir string
}

func (env *SdkTestEnv) NewCommandInDir(dir string, name string, arg ...string) *exec.Cmd {
	d := filepath.Join(env.CodeDir, dir)
	env.T.Logf("cd %s && %s %s", d, name, strings.Join(arg, " "))
	cmd := exec.Command(name, arg...)
	cmd.Dir = d
	return cmd
}

func (env *SdkTestEnv) NewCommand(name string, arg ...string) *exec.Cmd {
	return env.NewCommandInDir(".", name, arg...)
}

func (env *SdkTestEnv) RunCommand(cmd *exec.Cmd) {
	out, err := cmd.CombinedOutput()
	if !assert.NoError(env.T, err) {
		env.T.Logf("output: %v", string(out))
	}
}

func (env *SdkTestEnv) CommandInDir(dir string, name string, arg ...string) {
	env.RunCommand(env.NewCommandInDir(dir, name, arg...))
}

func (env *SdkTestEnv) Command(name string, arg ...string) {
	env.CommandInDir(".", name, arg...)
}

var defaultSdkTests = []SdkTest{
	{
		Directory:   "input-collision",
		Description: "Schema with types that could potentially produce collisions (go).",
	},
	{
		Directory:   "dash-named-schema",
		Description: "Simple schema with a two part name (foo-bar)",
	},
	{
		Directory:   "external-resource-schema",
		Description: "External resource schema",
	},
	{
		Directory:   "nested-module",
		Description: "Nested module",
	},
	{
		Directory:   "nested-module-thirdparty",
		Description: "Third-party nested module",
	},
	{
		Directory:   "plain-schema-gh6957",
		Description: "Repro for #6957",
	},
	{
		Directory:   "resource-args-python",
		Description: "Resource args with same named resource and type",
		HooksByLanguage: map[string][]SdkTestHook{
			"go": []SdkTestHook{
				SdkTestHook{
					Name: "test",
					RunHook: func(env *SdkTestEnv) {
						env.CommandInDir("go-program", "go", "test", "./...")
					},
				},
			},
		},
	},
	{
		Directory:   "simple-enum-schema",
		Description: "Simple schema with enum types",
	},
	{
		Directory:   "simple-plain-schema",
		Description: "Simple schema with plain properties",
	},
	{
		Directory:   "simple-plain-schema-with-root-package",
		Description: "Simple schema with root package set",
	},
	{
		Directory:   "simple-resource-schema",
		Description: "Simple schema with local resource properties",
	},
	{
		Directory:   "simple-resource-schema-custom-pypackage-name",
		Description: "Simple schema with local resource properties and custom Python package name",
	},
	{
		Directory:   "simple-methods-schema",
		Description: "Simple schema with methods",
	},
	{
		Directory:   "simple-yaml-schema",
		Description: "Simple schema encoded using YAML",
	},
	{
		Directory:   "provider-config-schema",
		Description: "Simple provider config schema",
	},
	{
		Directory:   "replace-on-change",
		Description: "Simple use of replaceOnChange in schema",
	},
}

// TestSDKCodegen runs the complete set of SDK code generation tests against a particular language's code generator.
//
// An SDK code generation test consists of a schema and a set of expected outputs for each language. Each test is
// structured as a directory that contains that information:
//
//     test-directory/
//         schema.(json|yaml)
//         language-0
//         ...
//         language-n
//
// The schema is the only piece that must be manually authored. Once the schema has been written, the expected outputs
// can be generated by running `PULUMI_ACCEPT=true go test ./..." from the `pkg/codegen` directory.
func TestSDKCodegen(t *testing.T, language string, genPackage GenPkgSignature) {
	TestSDKCodegenWithOptions(t, &TestSDKCodegenOptions{
		Language:   language,
		GenPackage: genPackage,
	})
}

// A variant of TestSDKCodegen with more options.
func TestSDKCodegenWithOptions(t *testing.T, rawOptions *TestSDKCodegenOptions) {
	options := rawOptions.WithDefaults()
	for _, tt := range options.SDKTests {
		t.Run(tt.Description, func(t *testing.T) {
			if tt.IncludeLanguage != nil && !tt.IncludeLanguage(options.Language) {
				t.Skip()
				return
			}

			testDir := filepath.Join(options.TestRootDir, filepath.FromSlash(tt.Directory))

			schemaPath := filepath.Join(testDir, "schema.json")
			if _, err := os.Stat(schemaPath); err != nil && os.IsNotExist(err) {
				schemaPath = filepath.Join(testDir, "schema.yaml")
			}

			files, err := GeneratePackageFilesFromSchema(schemaPath, options.GenPackage)
			require.NoError(t, err)

			if !RewriteFilesWhenPulumiAccept(t, testDir, options.Language, files) {
				expectedFiles, err := LoadBaseline(testDir, options.Language)
				require.NoError(t, err)

				if !ValidateFileEquality(t, files, expectedFiles) {
					t.Fail()
				}
			}

			CopyExtraFiles(t, dirPath, opts.Language)

			// Merge language-specific global and
			// test-specific checks, with test-specific
			// having precedence.
			allChecks := make(map[string]CodegenCheck)
			for k, v := range opts.Checks {
				allChecks[k] = v
			}
			for k, v := range tt.Checks {
				allChecks[k] = v
			}

			// Define check filter.
			shouldSkipCheck := func(check string) bool {
				return false
			}

			codeDir := filepath.Join(testDir, options.Language)

			if hooks, ok := tt.HooksByLanguage[options.Language]; ok {
				runOne := func(hook SdkTestHook) {
					t.Run(hook.Name, func(t *testing.T) {
						hook.RunHook(&SdkTestEnv{
							T:       t,
							CodeDir: codeDir,
						})
					})
				}

				for _, hook := range hooks {
					runOne(hook)
				}
			}
		})
	}
}

type TestSDKCodegenOptions struct {
	// Name of the programming language.
	Language string

	// Language-aware code generator; such as `GeneratePackage`.
	// from `codgen/dotnet`.
	GenPackage GenPkgSignature

	// Tests to run; defaults to `defaultSdkTests`.
	SDKTests []SdkTest

	// Root folder to find tests in, if empty defaults to `../internal/test/testdata`.
	TestRootDir string
}

func (opts *TestSDKCodegenOptions) WithDefaults() *TestSDKCodegenOptions {
	o := *opts

	if len(o.SDKTests) == 0 {
		o.SDKTests = defaultSdkTests
	}

	if o.TestRootDir == "" {
		o.TestRootDir = filepath.Join("..", "internal", "test", "testdata")
	}

	return &o
}
