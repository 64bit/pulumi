// AUTO-GENERATED FILE! DO NOT EDIT THIS FILE MANUALLY.

// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// nolint: lll, goconst
package provider

import "text/template"

var bundledTemplates = map[string]*template.Template{
	"provider.go.tmpl":           template.Must(template.New("provider.go.tmpl").Parse("package {{.Package}}\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/blang/semver\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource/plugin\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/tokens\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/workspace\"\n\tprovidersdk \"github.com/pulumi/pulumi/sdk/v2/go/pulumi/provider\"\n\n\t{{range .ProviderImports}}\n\t{{.Name}} \"{{.Path}}\"\n\t{{end}}\n)\n\ntype provider struct {\n\tcancelContext context.Context\n\tcancel func()\n\n\tpkg string\n\tversion semver.Version\n\tschema  []byte\n\n\thost plugin.Host\n\tprovider *{{.ProviderType}}\n}\n\nfunc NewProvider(host plugin.Host, p *{{.ProviderType}}) plugin.Provider {\n\tcancelContext, cancel := context.WithCancel(context.Background())\n\n\treturn &provider{\n\t\tcancelContext: cancelContext,\n\t\tcancel: cancel,\n\n\t\tpkg: \"{{.Package}}\",\n\t\tversion: semver.MustParse(\"{{.Version}}\"),\n\t\tschema: pulumiSchema,\n\n\t\thost: host,\n\t\tprovider: p,\n\t}\n}\n\nfunc (p *provider) newContext(urn resource.URN) *providersdk.Context {\n\treturn providersdk.NewContext(context.Background(), p.host, urn)\n}\n\nfunc (p *provider) Close() error {\n\tp.cancel()\n\treturn nil\n}\n\nfunc (p *provider) Pkg() tokens.Package {\n\treturn tokens.Package(p.pkg)\n}\n\nfunc (p *provider) GetSchema(version int) ([]byte, error) {\n\tif version > 1 {\n\t\treturn nil, fmt.Errorf(\"unsupported schema version %v\", version)\n\t}\n\treturn p.schema, nil\n}\n\nfunc (p *provider) GetPluginInfo() (workspace.PluginInfo, error) {\n\treturn workspace.PluginInfo{\n\t\tName: p.pkg,\n\t\tKind: workspace.ResourcePlugin,\n\t\tVersion: &p.version,\n\t}, nil\n}\n\nfunc (p *provider) SignalCancellation() error {\n\tp.cancel()\n\treturn nil\n}\n")),
	"provider_configure.go.tmpl": template.Must(template.New("provider_configure.go.tmpl").Parse("package {{.Package}}\n\nimport (\n\t\"reflect\"\n\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource/plugin\"\n\tprovidersdk \"github.com/pulumi/pulumi/sdk/v2/go/pulumi/provider\"\n\n\t{{range .ProviderImports}}\n\t{{.Name}} \"{{.Path}}\"\n\t{{end}}\n)\n\nfunc (p *provider) CheckConfig(urn resource.URN, olds, news resource.PropertyMap, allowUnknowns bool) (resource.PropertyMap, []plugin.CheckFailure, error) {\n\tschema := reflect.TypeOf((*{{.ProviderArgsType}})(nil)).Elem()\n\treturn providersdk.Check(news, schema)\n}\n\nfunc (p *provider) DiffConfig(urn resource.URN, olds, news resource.PropertyMap, allowUnknowns bool, ignoreChanges []string) (plugin.DiffResult, error) {\n\tvar currentArgs {{.ProviderArgsType}}\n\tif err := providersdk.Unmarshal(olds, &currentArgs); err != nil {\n\t\treturn plugin.DiffResult{}, err\n\t}\n\n\tvar newArgs {{.ProviderArgsType}}\n\tif err := providersdk.Unmarshal(news, &newArgs); err != nil {\n\t\treturn plugin.DiffResult{}, err\n\t}\n\n\treturn providersdk.Diff(&currentArgs, &newArgs, ignoreChanges)\n}\n\nfunc (p *provider) Configure(inputs resource.PropertyMap) error {\n\tvar args {{.ProviderArgsType}}\n\tif err := providersdk.Unmarshal(inputs, &args); err != nil {\n\t\treturn err\n\t}\n\treturn p.provider.Configure(p.newContext(\"\"), &args, provider.ConfigureOptions{})\n}\n")),
	"provider_functions.go.tmpl": template.Must(template.New("provider_functions.go.tmpl").Parse("package {{.Package}}\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource/plugin\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/tokens\"\n\tprovidersdk \"github.com/pulumi/pulumi/sdk/v2/go/pulumi/provider\"\n\n\t{{range .FunctionImports}}\n\t{{.Name}} \"{{.Path}}\"\n\t{{end}}\n)\n\nfunc (p *provider) Invoke(tok tokens.ModuleMember, args resource.PropertyMap) (resource.PropertyMap, []plugin.CheckFailure, error) {\n\tswitch tok {\n\t{{range .Functions}}\n\tcase \"{{.Token}}\":\n\t\targs, failures, err := providersdk.Check(args, reflect.TypeOf((*{{.ArgsType}})(nil)).Elem())\n\t\tif err != nil || len(failures) != 0 {\n\t\t\treturn nil, failures, err\n\t\t}\n\n\t\tvar functionArgs {{.ArgsType}}\n\t\tif err := providersdk.Unmarshal(args, &functionArgs); err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\n\t\tresult, err := {{.Function}}(p.newContext(\"\"), p.provider, &functionArgs, provider.CallOptions{})\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\n\t\tresultObject, err := providersdk.Marshal(result)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\treturn resultObject, nil, nil\n\t{{end}}\n\tdefault:\n\t\treturn nil, nil, fmt.Errorf(\"unknown function %v\", tok)\n\t}\n}\n\nfunc (p *provider) StreamInvoke(tok tokens.ModuleMember, args resource.PropertyMap, onNext func(resource.PropertyMap) error) ([]plugin.CheckFailure, error) {\n\treturn nil, fmt.Errorf(\"unknown function %v\", tok)\n}\n")),
	"provider_resources.go.tmpl": template.Must(template.New("provider_resources.go.tmpl").Parse("package {{.Package}}\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/resource/plugin\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/common/tokens\"\n\tprovidersdk \"github.com/pulumi/pulumi/sdk/v2/go/pulumi/provider\"\n\n\t{{range .ResourceImports}}\n\t{{.Name}} \"{{.Path}}\"\n\t{{end}}\n)\n\nfunc (p *provider) Check(urn resource.URN, state, inputs resource.PropertyMap, allowUnknowns bool) (resource.PropertyMap, []plugin.CheckFailure, error) {\n\tswitch urn.Type() {\n\t{{range .CustomResources}}\n\tcase \"{{.Token}}\":\n\t\tschema := reflect.TypeOf((*{{.ArgsType}})(nil)).Elem()\n\t\treturn providersdk.Check(inputs, schema)\n\t{{end}}\n\tdefault:\n\t\treturn nil, nil, fmt.Errorf(\"unknown resource type %v\", urn.Type())\n\t}\n}\n\nfunc (p *provider) Diff(urn resource.URN, id resource.ID, state, inputs resource.PropertyMap, allowUnknowns bool, ignoreChanges []string) (plugin.DiffResult, error) {\n\tswitch urn.Type() {\n\t{{range .CustomResources}}\n\tcase \"{{.Token}}\":\n\t\tvar res {{.ResourceType}}\n\t\tif err := providersdk.Unmarshal(state, &res); err != nil {\n\t\t\treturn plugin.DiffResult{}, err\n\t\t}\n\n\t\tvar newArgs {{.ArgsType}}\n\t\tif err := providersdk.Unmarshal(inputs, &newArgs); err != nil {\n\t\t\treturn plugin.DiffResult{}, err\n\t\t}\n\n\t\treturn providersdk.Diff(res.Args(), &newArgs, ignoreChanges)\n\t{{end}}\n\tdefault:\n\t\treturn plugin.DiffResult{}, fmt.Errorf(\"unknown resource type %v\", urn.Type())\n\t}\n}\n\nfunc (p *provider) Create(urn resource.URN, inputs resource.PropertyMap, timeout float64, preview bool) (resource.ID, resource.PropertyMap, resource.Status, error) {\n\tswitch urn.Type() {\n\t{{range .CustomResources}}\n\tcase \"{{.Token}}\":\n\t\tvar args {{.ArgsType}}\n\t\tif err := providersdk.Unmarshal(inputs, &args); err != nil {\n\t\t\treturn \"\", nil, resource.StatusUnknown, err\n\t\t}\n\n\t\tvar res {{.ResourceType}}\n\t\tid, err := res.Create(p.newContext(urn), p.provider, &args, timeout, provider.CreateOptions{Preview: preview})\n\t\tif err != nil {\n\t\t\treturn \"\", nil, resource.StatusUnknown, err\n\t\t}\n\n\t\trpcState, err := providersdk.Marshal(res)\n\t\tif err != nil {\n\t\t\treturn resource.ID(id), nil, resource.StatusOK, err\n\t\t}\n\t\treturn resource.ID(id), rpcState, resource.StatusOK, nil\n\t{{end}}\n\tdefault:\n\t\treturn \"\", nil, resource.StatusUnknown, fmt.Errorf(\"unknown resource type %v\", urn.Type())\n\t}\n}\n\nfunc (p *provider) Read(urn resource.URN, id resource.ID, inputs, state resource.PropertyMap) (plugin.ReadResult, resource.Status, error) {\n\tswitch urn.Type() {\n\t{{range .CustomResources}}\n\tcase \"{{.Token}}\":\n\t\tvar res {{.ResourceType}}\n\t\tif err := providersdk.Unmarshal(state, &res); err != nil {\n\t\t\treturn plugin.ReadResult{}, resource.StatusUnknown, err\n\t\t}\n\n\t\terr := res.Read(p.newContext(urn), p.provider, providersdk.ID(id), provider.ReadOptions{})\n\t\tif err != nil {\n\t\t\treturn plugin.ReadResult{}, resource.StatusUnknown, err\n\t\t}\n\n\t\trpcInputs, err := providersdk.Marshal(res.Args())\n\t\tif err != nil {\n\t\t\treturn plugin.ReadResult{}, resource.StatusUnknown, err\n\t\t}\n\n\t\trpcState, err := providersdk.Marshal(res)\n\t\tif err != nil {\n\t\t\treturn plugin.ReadResult{}, resource.StatusUnknown, err\n\t\t}\n\n\t\treturn plugin.ReadResult{\n\t\t\tID: resource.ID(id),\n\t\t\tInputs: rpcInputs,\n\t\t\tOutputs: rpcState,\n\t\t}, resource.StatusOK, nil\n\t{{end}}\n\tdefault:\n\t\treturn plugin.ReadResult{}, resource.StatusUnknown, fmt.Errorf(\"unknown resource type %v\", urn.Type())\n\t}\n}\n\nfunc (p *provider) Update(urn resource.URN, id resource.ID, state, inputs resource.PropertyMap, timeout float64, ignoreChanges []string, preview bool) (resource.PropertyMap, resource.Status, error) {\n\tswitch urn.Type() {\n\t{{range .CustomResources}}\n\tcase \"{{.Token}}\":\n\t\tvar args {{.ArgsType}}\n\t\tif err := providersdk.Unmarshal(inputs, &args); err != nil {\n\t\t\treturn nil, resource.StatusOK, err\n\t\t}\n\n\t\tvar res {{.ResourceType}}\n\t\tif err := providersdk.Unmarshal(state, &res); err != nil {\n\t\t\treturn nil, resource.StatusOK, err\n\t\t}\n\n\t\tif err := providersdk.IgnoreChanges(res.Args(), &args, ignoreChanges); err != nil {\n\t\t\treturn nil, resource.StatusOK, err\n\t\t}\n\n\t\tif err := res.Update(p.newContext(urn), p.provider, providersdk.ID(id), &args, timeout, provider.UpdateOptions{Preview: preview}); err != nil {\n\t\t\treturn nil, resource.StatusUnknown, err\n\t\t}\n\n\t\trpcState, err := providersdk.Marshal(res)\n\t\tif err != nil {\n\t\t\treturn nil, resource.StatusOK, err\n\t\t}\n\n\t\treturn rpcState, resource.StatusOK, nil\n\t{{end}}\n\tdefault:\n\t\treturn nil, resource.StatusUnknown, fmt.Errorf(\"unknown resource type %v\", urn.Type())\n\t}\n}\n\nfunc (p *provider) Delete(urn resource.URN, id resource.ID, state resource.PropertyMap, timeout float64) (resource.Status, error) {\n\tswitch urn.Type() {\n\t{{range .CustomResources}}\n\tcase \"{{.Token}}\":\n\t\tvar res {{.ResourceType}}\n\t\tif err := providersdk.Unmarshal(state, &res); err != nil {\n\t\t\treturn resource.StatusOK, err\n\t\t}\n\n\t\tif err := res.Delete(p.newContext(urn), p.provider, providersdk.ID(id), timeout, provider.DeleteOptions{}); err != nil {\n\t\t\treturn resource.StatusUnknown, err\n\t\t}\n\n\t\treturn resource.StatusOK, nil\n\t{{end}}\n\tdefault:\n\t\treturn resource.StatusUnknown, fmt.Errorf(\"unknown resource type %v\", urn.Type())\n\t}\n}\n\nfunc (p *provider) Construct(info plugin.ConstructInfo, typ tokens.Type, name tokens.QName, parent resource.URN, inputs resource.PropertyMap, options plugin.ConstructOptions) (plugin.ConstructResult, error) {\n\tswitch typ {\n/*\n\t{{range .ComponentResources}}\n\tcase \"{{.Token}}\":\n\t\tvar args {{.ArgsType}}\n\t\tif err := providersdk.Unmarshal(inputs, &args); err != nil {\n\t\t\treturn plugin.ConstructResult{}, err\n\t\t}\n\n\t\tctx, options, err := providersdk.NewConstructContext(info, options)\n\t\tif err != nil {\n\t\t\treturn plugin.ConstructResult{}, err\n\t\t}\n\n\t\tres, err := {{.Constructor}}(ctx, name, args, options...)\n\t\tif err != nil {\n\t\t\treturn plugin.ConstructResult{}, err\n\t\t}\n\n\t\treturn providersdk.MarshalConstructResult(res)\n\t{{end}}\n*/\n\tdefault:\n\t\treturn plugin.ConstructResult{}, fmt.Errorf(\"unknown resource type %v\", typ)\n\t}\n}\n")),
}
