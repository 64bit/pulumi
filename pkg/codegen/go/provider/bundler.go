//+build ignore

// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"
)

var tmpl = template.Must(template.New("").Parse(`
	// AUTO-GENERATED FILE! DO NOT EDIT THIS FILE MANUALLY.

	// Copyright 2016-2020, Pulumi Corporation.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	// nolint: lll, goconst
	package provider

	import "text/template"

	var bundledTemplates = map[string]*template.Template{
		{{- range $name, $text := .}}
		"{{$name}}": template.Must(template.New("{{$name}}").Parse({{$text}})),
		{{- end}}
	}
`))

func readDirectory(files map[string]string, root, relativePath string) error {
	absolutePath := filepath.Join(root, relativePath)

	infos, err := ioutil.ReadDir(absolutePath)
	if err != nil {
		return fmt.Errorf("reading %v: %v", absolutePath, err)
	}

	for _, f := range infos {
		if f.IsDir() {
			if err = readDirectory(files, root, filepath.Join(relativePath, f.Name())); err != nil {
				return err
			}
		} else {
			contents, err := ioutil.ReadFile(filepath.Join(absolutePath, f.Name()))
			if err != nil {
				return fmt.Errorf("reading %v: %v", f.Name(), err)
			}

			pathComponents := append(filepath.SplitList(relativePath), f.Name())
			files[strings.Join(pathComponents, "/")] = strconv.Quote(string(contents))
		}
	}

	return nil
}

// main reads files under the templates directory, and builds a map of filename to byte slice.
// Each file's contents are then written to a generated file.
func main() {
	inputDirectory := flag.String("dir", "", "the input directory containing the templates to bundle")
	outputFile := flag.String("out", "", "the output file for the bundled templates")
	flag.Parse()

	absoluteInputPath, err := filepath.Abs(*inputDirectory)
	if err != nil {
		log.Fatalf("Error processing input path: %v", err)
	}

	templates := map[string]string{}
	if err = readDirectory(templates, absoluteInputPath, ""); err != nil {
		log.Fatalf("Error reading input: %v", err)
	}

	var buffer bytes.Buffer
	if err = tmpl.Execute(&buffer, templates); err != nil {
		log.Fatalf("Error executing template: %v", err)
	}

	formatted, err := format.Source(buffer.Bytes())
	if err != nil {
		log.Fatalf("Error formatting generated code: %v", err)
	}

	if err = ioutil.WriteFile(*outputFile, formatted, os.ModePerm); err != nil {
		log.Fatalf("Error writing output file: %v", err)
	}
}
