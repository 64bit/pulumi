package {{.Package}}

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/common/resource"
	"github.com/pulumi/pulumi/sdk/v2/go/common/resource/plugin"
	providersdk "github.com/pulumi/pulumi/sdk/v2/go/x/provider"

	{{range .ProviderImports}}
	{{.Name}} "{{.Path}}"
	{{end}}
)

func (p *provider) CheckConfig(urn resource.URN, olds, news resource.PropertyMap, allowUnknowns bool) (resource.PropertyMap, []plugin.CheckFailure, error) {
	schema := reflect.TypeOf((*{{.ProviderArgsType}})(nil)).Elem()
	return providersdk.Check(news, schema)
}

func (p *provider) DiffConfig(urn resource.URN, olds, news resource.PropertyMap, allowUnknowns bool, ignoreChanges []string) (plugin.DiffResult, error) {
	var currentArgs {{.ProviderArgsType}}
	if err := providersdk.Unmarshal(olds, &currentArgs); err != nil {
		return plugin.DiffResult{}, err
	}

	var newArgs {{.ProviderArgsType}}
	if err := providersdk.Unmarshal(news, &newArgs); err != nil {
		return plugin.DiffResult{}, err
	}

	return providersdk.Diff(&currentArgs, &newArgs, ignoreChanges)
}

func (p *provider) Configure(inputs resource.PropertyMap) error {
	var args {{.ProviderArgsType}}
	if err := providersdk.Unmarshal(inputs, &args); err != nil {
		return err
	}
	return p.provider.Configure(p.newContext(""), &args, nil)
}
