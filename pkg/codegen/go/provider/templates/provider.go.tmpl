package {{.Package}}

import (
	"context"
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/common/resource"
	"github.com/pulumi/pulumi/sdk/v2/go/common/resource/plugin"
	"github.com/pulumi/pulumi/sdk/v2/go/common/tokens"
	"github.com/pulumi/pulumi/sdk/v2/go/common/workspace"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	providersdk "github.com/pulumi/pulumi/sdk/v2/go/pulumi/provider"

	{{range .ProviderImports}}
	{{.Name}} "{{.Path}}"
	{{end}}
)

type provider struct {
	cancelContext context.Context
	cancel func()

	pkg string
	version semver.Version
	schema  []byte

	logger plugin.Logger
	provider *{{.ProviderType}}
}

func NewProvider(logger plugin.Logger, p *{{.ProviderType}}) plugin.Provider {
	cancelContext, cancel := context.WithCancel(context.Background())

	return &provider{
		cancelContext: cancelContext,
		cancel: cancel,

		pkg: "{{.Package}}",
		version: semver.MustParse("{{.Version}}"),
		schema: pulumiSchema,

		logger: logger,
		provider: p,
	}
}

func (p *provider) newContext(urn resource.URN) *providersdk.Context {
	return providersdk.NewContext(context.Background(), p.logger, urn)
}

func (p *provider) Close() error {
	p.cancel()
	return nil
}

func (p *provider) Pkg() tokens.Package {
	return tokens.Package(p.pkg)
}

func (p *provider) GetSchema(version int) ([]byte, error) {
	if version > 1 {
		return nil, fmt.Errorf("unsupported schema version %v", version)
	}
	return p.schema, nil
}

func (p *provider) GetPluginInfo() (workspace.PluginInfo, error) {
	return workspace.PluginInfo{
		Name: p.pkg,
		Kind: workspace.ResourcePlugin,
		Version: &p.version,
	}, nil
}

func (p *provider) SignalCancellation() error {
	p.cancel()
	return nil
}

func init() {
	pulumi.RegisterProvider("{{.Package}}", "{{.Version}}", func(logger plugin.Logger) (plugin.Provider, error) {
		var p {{.ProviderType}}
		return NewProvider(logger, &p), nil
	})
}
