// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apitype

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson40eb0d12DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(in *jlexer.Lexer, out *UpdateInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = UpdateKind(in.String())
		case "startTime":
			out.StartTime = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		case "environment":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Environment = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Environment)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Config = make(map[string]ConfigValue)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 ConfigValue
					(v2).UnmarshalEasyJSON(in)
					(out.Config)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "result":
			out.Result = UpdateResult(in.String())
		case "endTime":
			out.EndTime = int64(in.Int64())
		case "version":
			out.Version = int(in.Int())
		case "deployment":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deployment).UnmarshalJSON(data))
			}
		case "resourceChanges":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ResourceChanges = make(map[OpType]int)
				} else {
					out.ResourceChanges = nil
				}
				for !in.IsDelim('}') {
					key := OpType(in.String())
					in.WantColon()
					var v3 int
					v3 = int(in.Int())
					(out.ResourceChanges)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson40eb0d12EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(out *jwriter.Writer, in UpdateInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"environment\":"
		out.RawString(prefix)
		if in.Environment == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Environment {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Config {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				(v5Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		out.String(string(in.Result))
	}
	{
		const prefix string = ",\"endTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	if len(in.Deployment) != 0 {
		const prefix string = ",\"deployment\":"
		out.RawString(prefix)
		out.Raw((in.Deployment).MarshalJSON())
	}
	if len(in.ResourceChanges) != 0 {
		const prefix string = ",\"resourceChanges\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.ResourceChanges {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.Int(int(v6Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson40eb0d12EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson40eb0d12EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson40eb0d12DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson40eb0d12DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(l, v)
}
func easyjson40eb0d12DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(in *jlexer.Lexer, out *GetHistoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "updates":
			if in.IsNull() {
				in.Skip()
				out.Updates = nil
			} else {
				in.Delim('[')
				if out.Updates == nil {
					if !in.IsDelim(']') {
						out.Updates = make([]UpdateInfo, 0, 0)
					} else {
						out.Updates = []UpdateInfo{}
					}
				} else {
					out.Updates = (out.Updates)[:0]
				}
				for !in.IsDelim(']') {
					var v7 UpdateInfo
					(v7).UnmarshalEasyJSON(in)
					out.Updates = append(out.Updates, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson40eb0d12EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(out *jwriter.Writer, in GetHistoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"updates\":"
		out.RawString(prefix[1:])
		if in.Updates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Updates {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetHistoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson40eb0d12EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetHistoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson40eb0d12EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetHistoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson40eb0d12DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetHistoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson40eb0d12DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(l, v)
}
