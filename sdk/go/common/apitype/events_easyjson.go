// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apitype

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype(in *jlexer.Lexer, out *SummaryEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maybeCorrupt":
			out.MaybeCorrupt = bool(in.Bool())
		case "durationSeconds":
			out.DurationSeconds = int(in.Int())
		case "resourceChanges":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ResourceChanges = make(map[OpType]int)
				for !in.IsDelim('}') {
					key := OpType(in.String())
					in.WantColon()
					var v1 int
					v1 = int(in.Int())
					(out.ResourceChanges)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PolicyPacks":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PolicyPacks = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.PolicyPacks)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype(out *jwriter.Writer, in SummaryEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maybeCorrupt\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.MaybeCorrupt))
	}
	{
		const prefix string = ",\"durationSeconds\":"
		out.RawString(prefix)
		out.Int(int(in.DurationSeconds))
	}
	{
		const prefix string = ",\"resourceChanges\":"
		out.RawString(prefix)
		if in.ResourceChanges == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.ResourceChanges {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.Int(int(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"PolicyPacks\":"
		out.RawString(prefix)
		if in.PolicyPacks == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.PolicyPacks {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(in *jlexer.Lexer, out *StepEventStateMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "urn":
			out.URN = string(in.String())
		case "custom":
			out.Custom = bool(in.Bool())
		case "delete":
			out.Delete = bool(in.Bool())
		case "id":
			out.ID = string(in.String())
		case "parent":
			out.Parent = string(in.String())
		case "protect":
			out.Protect = bool(in.Bool())
		case "inputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Inputs = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.Inputs)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "outputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Outputs = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					(out.Outputs)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "provider":
			out.Provider = string(in.String())
		case "initErrors":
			if in.IsNull() {
				in.Skip()
				out.InitErrors = nil
			} else {
				in.Delim('[')
				if out.InitErrors == nil {
					if !in.IsDelim(']') {
						out.InitErrors = make([]string, 0, 4)
					} else {
						out.InitErrors = []string{}
					}
				} else {
					out.InitErrors = (out.InitErrors)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.InitErrors = append(out.InitErrors, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(out *jwriter.Writer, in StepEventStateMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"urn\":"
		out.RawString(prefix)
		out.String(string(in.URN))
	}
	if in.Custom {
		const prefix string = ",\"custom\":"
		out.RawString(prefix)
		out.Bool(bool(in.Custom))
	}
	if in.Delete {
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.Delete))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	}
	if in.Protect {
		const prefix string = ",\"protect\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protect))
	}
	{
		const prefix string = ",\"inputs\":"
		out.RawString(prefix)
		if in.Inputs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Inputs {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"outputs\":"
		out.RawString(prefix)
		if in.Outputs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Outputs {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if m, ok := v9Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	if len(in.InitErrors) != 0 {
		const prefix string = ",\"initErrors\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.InitErrors {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StepEventStateMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StepEventStateMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StepEventStateMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StepEventStateMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(in *jlexer.Lexer, out *StepEventMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = OpType(in.String())
		case "urn":
			out.URN = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "old":
			if in.IsNull() {
				in.Skip()
				out.Old = nil
			} else {
				if out.Old == nil {
					out.Old = new(StepEventStateMetadata)
				}
				(*out.Old).UnmarshalEasyJSON(in)
			}
		case "new":
			if in.IsNull() {
				in.Skip()
				out.New = nil
			} else {
				if out.New == nil {
					out.New = new(StepEventStateMetadata)
				}
				(*out.New).UnmarshalEasyJSON(in)
			}
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]string, 0, 4)
					} else {
						out.Keys = []string{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Keys = append(out.Keys, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "diffs":
			if in.IsNull() {
				in.Skip()
				out.Diffs = nil
			} else {
				in.Delim('[')
				if out.Diffs == nil {
					if !in.IsDelim(']') {
						out.Diffs = make([]string, 0, 4)
					} else {
						out.Diffs = []string{}
					}
				} else {
					out.Diffs = (out.Diffs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Diffs = append(out.Diffs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "detailedDiff":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DetailedDiff = make(map[string]PropertyDiff)
				} else {
					out.DetailedDiff = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 PropertyDiff
					(v14).UnmarshalEasyJSON(in)
					(out.DetailedDiff)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "logical":
			out.Logical = bool(in.Bool())
		case "provider":
			out.Provider = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(out *jwriter.Writer, in StepEventMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"urn\":"
		out.RawString(prefix)
		out.String(string(in.URN))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"old\":"
		out.RawString(prefix)
		if in.Old == nil {
			out.RawString("null")
		} else {
			(*in.Old).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"new\":"
		out.RawString(prefix)
		if in.New == nil {
			out.RawString("null")
		} else {
			(*in.New).MarshalEasyJSON(out)
		}
	}
	if len(in.Keys) != 0 {
		const prefix string = ",\"keys\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.Keys {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.Diffs) != 0 {
		const prefix string = ",\"diffs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Diffs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.DetailedDiff) != 0 {
		const prefix string = ",\"detailedDiff\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.DetailedDiff {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				(v19Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.Logical {
		const prefix string = ",\"logical\":"
		out.RawString(prefix)
		out.Bool(bool(in.Logical))
	}
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StepEventMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StepEventMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StepEventMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StepEventMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(in *jlexer.Lexer, out *StdoutEngineEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(out *jwriter.Writer, in StdoutEngineEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StdoutEngineEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StdoutEngineEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StdoutEngineEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StdoutEngineEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(in *jlexer.Lexer, out *ResourcePreEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "planning":
			out.Planning = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(out *jwriter.Writer, in ResourcePreEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	if in.Planning {
		const prefix string = ",\"planning\":"
		out.RawString(prefix)
		out.Bool(bool(in.Planning))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourcePreEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourcePreEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourcePreEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourcePreEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(in *jlexer.Lexer, out *ResOutputsEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "planning":
			out.Planning = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(out *jwriter.Writer, in ResOutputsEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	if in.Planning {
		const prefix string = ",\"planning\":"
		out.RawString(prefix)
		out.Bool(bool(in.Planning))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResOutputsEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResOutputsEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResOutputsEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResOutputsEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(in *jlexer.Lexer, out *ResOpFailedEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "status":
			out.Status = int(in.Int())
		case "steps":
			out.Steps = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(out *jwriter.Writer, in ResOpFailedEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"steps\":"
		out.RawString(prefix)
		out.Int(int(in.Steps))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResOpFailedEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResOpFailedEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResOpFailedEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResOpFailedEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(in *jlexer.Lexer, out *PropertyDiff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "diffKind":
			out.Kind = DiffKind(in.String())
		case "inputDiff":
			out.InputDiff = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(out *jwriter.Writer, in PropertyDiff) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"diffKind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"inputDiff\":"
		out.RawString(prefix)
		out.Bool(bool(in.InputDiff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PropertyDiff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PropertyDiff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PropertyDiff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PropertyDiff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(in *jlexer.Lexer, out *PreludeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Config = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 string
					v20 = string(in.String())
					(out.Config)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(out *jwriter.Writer, in PreludeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix[1:])
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.Config {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				out.String(string(v21Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreludeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreludeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreludeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreludeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(in *jlexer.Lexer, out *PolicyEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resourceUrn":
			out.ResourceURN = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "policyName":
			out.PolicyName = string(in.String())
		case "policyPackName":
			out.PolicyPackName = string(in.String())
		case "policyPackVersion":
			out.PolicyPackVersion = string(in.String())
		case "policyPackVersionTag":
			out.PolicyPackVersionTag = string(in.String())
		case "enforcementLevel":
			out.EnforcementLevel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(out *jwriter.Writer, in PolicyEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ResourceURN != "" {
		const prefix string = ",\"resourceUrn\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ResourceURN))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"policyName\":"
		out.RawString(prefix)
		out.String(string(in.PolicyName))
	}
	{
		const prefix string = ",\"policyPackName\":"
		out.RawString(prefix)
		out.String(string(in.PolicyPackName))
	}
	{
		const prefix string = ",\"policyPackVersion\":"
		out.RawString(prefix)
		out.String(string(in.PolicyPackVersion))
	}
	{
		const prefix string = ",\"policyPackVersionTag\":"
		out.RawString(prefix)
		out.String(string(in.PolicyPackVersionTag))
	}
	{
		const prefix string = ",\"enforcementLevel\":"
		out.RawString(prefix)
		out.String(string(in.EnforcementLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(in *jlexer.Lexer, out *EngineEventBatch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]EngineEvent, 0, 0)
					} else {
						out.Events = []EngineEvent{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v22 EngineEvent
					(v22).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(out *jwriter.Writer, in EngineEventBatch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix[1:])
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Events {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EngineEventBatch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EngineEventBatch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EngineEventBatch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EngineEventBatch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(in *jlexer.Lexer, out *EngineEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sequence":
			out.Sequence = int(in.Int())
		case "timestamp":
			out.Timestamp = int(in.Int())
		case "cancelEvent":
			if in.IsNull() {
				in.Skip()
				out.CancelEvent = nil
			} else {
				if out.CancelEvent == nil {
					out.CancelEvent = new(CancelEvent)
				}
				(*out.CancelEvent).UnmarshalEasyJSON(in)
			}
		case "stdoutEvent":
			if in.IsNull() {
				in.Skip()
				out.StdoutEvent = nil
			} else {
				if out.StdoutEvent == nil {
					out.StdoutEvent = new(StdoutEngineEvent)
				}
				(*out.StdoutEvent).UnmarshalEasyJSON(in)
			}
		case "diagnosticEvent":
			if in.IsNull() {
				in.Skip()
				out.DiagnosticEvent = nil
			} else {
				if out.DiagnosticEvent == nil {
					out.DiagnosticEvent = new(DiagnosticEvent)
				}
				(*out.DiagnosticEvent).UnmarshalEasyJSON(in)
			}
		case "preludeEvent":
			if in.IsNull() {
				in.Skip()
				out.PreludeEvent = nil
			} else {
				if out.PreludeEvent == nil {
					out.PreludeEvent = new(PreludeEvent)
				}
				(*out.PreludeEvent).UnmarshalEasyJSON(in)
			}
		case "summaryEvent":
			if in.IsNull() {
				in.Skip()
				out.SummaryEvent = nil
			} else {
				if out.SummaryEvent == nil {
					out.SummaryEvent = new(SummaryEvent)
				}
				(*out.SummaryEvent).UnmarshalEasyJSON(in)
			}
		case "resourcePreEvent":
			if in.IsNull() {
				in.Skip()
				out.ResourcePreEvent = nil
			} else {
				if out.ResourcePreEvent == nil {
					out.ResourcePreEvent = new(ResourcePreEvent)
				}
				(*out.ResourcePreEvent).UnmarshalEasyJSON(in)
			}
		case "resOutputsEvent":
			if in.IsNull() {
				in.Skip()
				out.ResOutputsEvent = nil
			} else {
				if out.ResOutputsEvent == nil {
					out.ResOutputsEvent = new(ResOutputsEvent)
				}
				(*out.ResOutputsEvent).UnmarshalEasyJSON(in)
			}
		case "resOpFailedEvent":
			if in.IsNull() {
				in.Skip()
				out.ResOpFailedEvent = nil
			} else {
				if out.ResOpFailedEvent == nil {
					out.ResOpFailedEvent = new(ResOpFailedEvent)
				}
				(*out.ResOpFailedEvent).UnmarshalEasyJSON(in)
			}
		case "policyEvent":
			if in.IsNull() {
				in.Skip()
				out.PolicyEvent = nil
			} else {
				if out.PolicyEvent == nil {
					out.PolicyEvent = new(PolicyEvent)
				}
				(*out.PolicyEvent).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(out *jwriter.Writer, in EngineEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Sequence))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int(int(in.Timestamp))
	}
	if in.CancelEvent != nil {
		const prefix string = ",\"cancelEvent\":"
		out.RawString(prefix)
		(*in.CancelEvent).MarshalEasyJSON(out)
	}
	if in.StdoutEvent != nil {
		const prefix string = ",\"stdoutEvent\":"
		out.RawString(prefix)
		(*in.StdoutEvent).MarshalEasyJSON(out)
	}
	if in.DiagnosticEvent != nil {
		const prefix string = ",\"diagnosticEvent\":"
		out.RawString(prefix)
		(*in.DiagnosticEvent).MarshalEasyJSON(out)
	}
	if in.PreludeEvent != nil {
		const prefix string = ",\"preludeEvent\":"
		out.RawString(prefix)
		(*in.PreludeEvent).MarshalEasyJSON(out)
	}
	if in.SummaryEvent != nil {
		const prefix string = ",\"summaryEvent\":"
		out.RawString(prefix)
		(*in.SummaryEvent).MarshalEasyJSON(out)
	}
	if in.ResourcePreEvent != nil {
		const prefix string = ",\"resourcePreEvent\":"
		out.RawString(prefix)
		(*in.ResourcePreEvent).MarshalEasyJSON(out)
	}
	if in.ResOutputsEvent != nil {
		const prefix string = ",\"resOutputsEvent\":"
		out.RawString(prefix)
		(*in.ResOutputsEvent).MarshalEasyJSON(out)
	}
	if in.ResOpFailedEvent != nil {
		const prefix string = ",\"resOpFailedEvent\":"
		out.RawString(prefix)
		(*in.ResOpFailedEvent).MarshalEasyJSON(out)
	}
	if in.PolicyEvent != nil {
		const prefix string = ",\"policyEvent\":"
		out.RawString(prefix)
		(*in.PolicyEvent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EngineEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EngineEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EngineEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EngineEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(in *jlexer.Lexer, out *DiagnosticEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urn":
			out.URN = string(in.String())
		case "prefix":
			out.Prefix = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		case "streamID":
			out.StreamID = int(in.Int())
		case "ephemeral":
			out.Ephemeral = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(out *jwriter.Writer, in DiagnosticEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URN != "" {
		const prefix string = ",\"urn\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.URN))
	}
	if in.Prefix != "" {
		const prefix string = ",\"prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	if in.StreamID != 0 {
		const prefix string = ",\"streamID\":"
		out.RawString(prefix)
		out.Int(int(in.StreamID))
	}
	if in.Ephemeral {
		const prefix string = ",\"ephemeral\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ephemeral))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiagnosticEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiagnosticEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiagnosticEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiagnosticEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(l, v)
}
func easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(in *jlexer.Lexer, out *CancelEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(out *jwriter.Writer, in CancelEvent) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(l, v)
}
