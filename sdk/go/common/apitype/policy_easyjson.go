// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apitype

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(in *jlexer.Lexer, out *UpdatePolicyGroupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newName":
			if in.IsNull() {
				in.Skip()
				out.NewName = nil
			} else {
				if out.NewName == nil {
					out.NewName = new(string)
				}
				*out.NewName = string(in.String())
			}
		case "addStack":
			if in.IsNull() {
				in.Skip()
				out.AddStack = nil
			} else {
				if out.AddStack == nil {
					out.AddStack = new(PulumiStackReference)
				}
				(*out.AddStack).UnmarshalEasyJSON(in)
			}
		case "removeStack":
			if in.IsNull() {
				in.Skip()
				out.RemoveStack = nil
			} else {
				if out.RemoveStack == nil {
					out.RemoveStack = new(PulumiStackReference)
				}
				(*out.RemoveStack).UnmarshalEasyJSON(in)
			}
		case "addPolicyPack":
			if in.IsNull() {
				in.Skip()
				out.AddPolicyPack = nil
			} else {
				if out.AddPolicyPack == nil {
					out.AddPolicyPack = new(PolicyPackMetadata)
				}
				(*out.AddPolicyPack).UnmarshalEasyJSON(in)
			}
		case "removePolicyPack":
			if in.IsNull() {
				in.Skip()
				out.RemovePolicyPack = nil
			} else {
				if out.RemovePolicyPack == nil {
					out.RemovePolicyPack = new(PolicyPackMetadata)
				}
				(*out.RemovePolicyPack).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(out *jwriter.Writer, in UpdatePolicyGroupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NewName != nil {
		const prefix string = ",\"newName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.NewName))
	}
	if in.AddStack != nil {
		const prefix string = ",\"addStack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AddStack).MarshalEasyJSON(out)
	}
	if in.RemoveStack != nil {
		const prefix string = ",\"removeStack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RemoveStack).MarshalEasyJSON(out)
	}
	if in.AddPolicyPack != nil {
		const prefix string = ",\"addPolicyPack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AddPolicyPack).MarshalEasyJSON(out)
	}
	if in.RemovePolicyPack != nil {
		const prefix string = ",\"removePolicyPack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RemovePolicyPack).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePolicyGroupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePolicyGroupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePolicyGroupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePolicyGroupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(in *jlexer.Lexer, out *RequiredPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int(in.Int())
		case "versionTag":
			out.VersionTag = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "packLocation":
			out.PackLocation = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]*json.RawMessage)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *json.RawMessage
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(json.RawMessage)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					(out.Config)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(out *jwriter.Writer, in RequiredPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"versionTag\":"
		out.RawString(prefix)
		out.String(string(in.VersionTag))
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	if in.PackLocation != "" {
		const prefix string = ",\"packLocation\":"
		out.RawString(prefix)
		out.String(string(in.PackLocation))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Config {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					out.Raw((*v2Value).MarshalJSON())
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequiredPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequiredPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequiredPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequiredPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(in *jlexer.Lexer, out *PulumiStackReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "routingProject":
			out.RoutingProject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(out *jwriter.Writer, in PulumiStackReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"routingProject\":"
		out.RawString(prefix)
		out.String(string(in.RoutingProject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PulumiStackReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PulumiStackReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PulumiStackReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PulumiStackReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(in *jlexer.Lexer, out *PolicyPackWithVersions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "versions":
			if in.IsNull() {
				in.Skip()
				out.Versions = nil
			} else {
				in.Delim('[')
				if out.Versions == nil {
					if !in.IsDelim(']') {
						out.Versions = make([]int, 0, 8)
					} else {
						out.Versions = []int{}
					}
				} else {
					out.Versions = (out.Versions)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.Versions = append(out.Versions, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "versionTags":
			if in.IsNull() {
				in.Skip()
				out.VersionTags = nil
			} else {
				in.Delim('[')
				if out.VersionTags == nil {
					if !in.IsDelim(']') {
						out.VersionTags = make([]string, 0, 4)
					} else {
						out.VersionTags = []string{}
					}
				} else {
					out.VersionTags = (out.VersionTags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.VersionTags = append(out.VersionTags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(out *jwriter.Writer, in PolicyPackWithVersions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"versions\":"
		out.RawString(prefix)
		if in.Versions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Versions {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"versionTags\":"
		out.RawString(prefix)
		if in.VersionTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.VersionTags {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyPackWithVersions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyPackWithVersions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyPackWithVersions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyPackWithVersions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(in *jlexer.Lexer, out *PolicyPackMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "version":
			out.Version = int(in.Int())
		case "versionTag":
			out.VersionTag = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]*json.RawMessage)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 *json.RawMessage
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(json.RawMessage)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v9).UnmarshalJSON(data))
						}
					}
					(out.Config)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(out *jwriter.Writer, in PolicyPackMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"versionTag\":"
		out.RawString(prefix)
		out.String(string(in.VersionTag))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Config {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if v10Value == nil {
					out.RawString("null")
				} else {
					out.Raw((*v10Value).MarshalJSON())
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyPackMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyPackMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyPackMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyPackMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(in *jlexer.Lexer, out *PolicyGroupSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "isOrgDefault":
			out.IsOrgDefault = bool(in.Bool())
		case "numStacks":
			out.NumStacks = int(in.Int())
		case "numEnabledPolicyPacks":
			out.NumEnabledPolicyPacks = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(out *jwriter.Writer, in PolicyGroupSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"isOrgDefault\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOrgDefault))
	}
	{
		const prefix string = ",\"numStacks\":"
		out.RawString(prefix)
		out.Int(int(in.NumStacks))
	}
	{
		const prefix string = ",\"numEnabledPolicyPacks\":"
		out.RawString(prefix)
		out.Int(int(in.NumEnabledPolicyPacks))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyGroupSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyGroupSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyGroupSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyGroupSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(in *jlexer.Lexer, out *PolicyConfigSchema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]*json.RawMessage)
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 *json.RawMessage
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(json.RawMessage)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v11).UnmarshalJSON(data))
						}
					}
					(out.Properties)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "required":
			if in.IsNull() {
				in.Skip()
				out.Required = nil
			} else {
				in.Delim('[')
				if out.Required == nil {
					if !in.IsDelim(']') {
						out.Required = make([]string, 0, 4)
					} else {
						out.Required = []string{}
					}
				} else {
					out.Required = (out.Required)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Required = append(out.Required, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = JSONSchemaType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(out *jwriter.Writer, in PolicyConfigSchema) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Properties {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if v13Value == nil {
					out.RawString("null")
				} else {
					out.Raw((*v13Value).MarshalJSON())
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Required) != 0 {
		const prefix string = ",\"required\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Required {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyConfigSchema) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyConfigSchema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyConfigSchema) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyConfigSchema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(in *jlexer.Lexer, out *Policy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "enforcementLevel":
			out.EnforcementLevel = EnforcementLevel(in.String())
		case "message":
			out.Message = string(in.String())
		case "configSchema":
			if in.IsNull() {
				in.Skip()
				out.ConfigSchema = nil
			} else {
				if out.ConfigSchema == nil {
					out.ConfigSchema = new(PolicyConfigSchema)
				}
				(*out.ConfigSchema).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(out *jwriter.Writer, in Policy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"enforcementLevel\":"
		out.RawString(prefix)
		out.String(string(in.EnforcementLevel))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.ConfigSchema != nil {
		const prefix string = ",\"configSchema\":"
		out.RawString(prefix)
		(*in.ConfigSchema).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Policy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Policy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Policy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Policy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(in *jlexer.Lexer, out *ListPolicyPacksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "policyPacks":
			if in.IsNull() {
				in.Skip()
				out.PolicyPacks = nil
			} else {
				in.Delim('[')
				if out.PolicyPacks == nil {
					if !in.IsDelim(']') {
						out.PolicyPacks = make([]PolicyPackWithVersions, 0, 0)
					} else {
						out.PolicyPacks = []PolicyPackWithVersions{}
					}
				} else {
					out.PolicyPacks = (out.PolicyPacks)[:0]
				}
				for !in.IsDelim(']') {
					var v16 PolicyPackWithVersions
					(v16).UnmarshalEasyJSON(in)
					out.PolicyPacks = append(out.PolicyPacks, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(out *jwriter.Writer, in ListPolicyPacksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"policyPacks\":"
		out.RawString(prefix[1:])
		if in.PolicyPacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.PolicyPacks {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListPolicyPacksResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListPolicyPacksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListPolicyPacksResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListPolicyPacksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(in *jlexer.Lexer, out *ListPolicyGroupsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "policyGroups":
			if in.IsNull() {
				in.Skip()
				out.PolicyGroups = nil
			} else {
				in.Delim('[')
				if out.PolicyGroups == nil {
					if !in.IsDelim(']') {
						out.PolicyGroups = make([]PolicyGroupSummary, 0, 1)
					} else {
						out.PolicyGroups = []PolicyGroupSummary{}
					}
				} else {
					out.PolicyGroups = (out.PolicyGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v19 PolicyGroupSummary
					(v19).UnmarshalEasyJSON(in)
					out.PolicyGroups = append(out.PolicyGroups, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(out *jwriter.Writer, in ListPolicyGroupsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"policyGroups\":"
		out.RawString(prefix[1:])
		if in.PolicyGroups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.PolicyGroups {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListPolicyGroupsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListPolicyGroupsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListPolicyGroupsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListPolicyGroupsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(in *jlexer.Lexer, out *GetStackPolicyPacksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredPolicies":
			if in.IsNull() {
				in.Skip()
				out.RequiredPolicies = nil
			} else {
				in.Delim('[')
				if out.RequiredPolicies == nil {
					if !in.IsDelim(']') {
						out.RequiredPolicies = make([]RequiredPolicy, 0, 0)
					} else {
						out.RequiredPolicies = []RequiredPolicy{}
					}
				} else {
					out.RequiredPolicies = (out.RequiredPolicies)[:0]
				}
				for !in.IsDelim(']') {
					var v22 RequiredPolicy
					(v22).UnmarshalEasyJSON(in)
					out.RequiredPolicies = append(out.RequiredPolicies, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(out *jwriter.Writer, in GetStackPolicyPacksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RequiredPolicies) != 0 {
		const prefix string = ",\"requiredPolicies\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v23, v24 := range in.RequiredPolicies {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStackPolicyPacksResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStackPolicyPacksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStackPolicyPacksResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStackPolicyPacksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(in *jlexer.Lexer, out *GetPolicyPackResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "version":
			out.Version = int(in.Int())
		case "versionTag":
			out.VersionTag = string(in.String())
		case "policies":
			if in.IsNull() {
				in.Skip()
				out.Policies = nil
			} else {
				in.Delim('[')
				if out.Policies == nil {
					if !in.IsDelim(']') {
						out.Policies = make([]Policy, 0, 0)
					} else {
						out.Policies = []Policy{}
					}
				} else {
					out.Policies = (out.Policies)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Policy
					(v25).UnmarshalEasyJSON(in)
					out.Policies = append(out.Policies, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "applied":
			out.Applied = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(out *jwriter.Writer, in GetPolicyPackResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"versionTag\":"
		out.RawString(prefix)
		out.String(string(in.VersionTag))
	}
	{
		const prefix string = ",\"policies\":"
		out.RawString(prefix)
		if in.Policies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Policies {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"applied\":"
		out.RawString(prefix)
		out.Bool(bool(in.Applied))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPolicyPackResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPolicyPackResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPolicyPackResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPolicyPackResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(in *jlexer.Lexer, out *GetPolicyPackConfigSchemaResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configSchema":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ConfigSchema = make(map[string]PolicyConfigSchema)
				} else {
					out.ConfigSchema = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v28 PolicyConfigSchema
					(v28).UnmarshalEasyJSON(in)
					(out.ConfigSchema)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(out *jwriter.Writer, in GetPolicyPackConfigSchemaResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ConfigSchema) != 0 {
		const prefix string = ",\"configSchema\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.ConfigSchema {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v29Name))
				out.RawByte(':')
				(v29Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPolicyPackConfigSchemaResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPolicyPackConfigSchemaResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPolicyPackConfigSchemaResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPolicyPackConfigSchemaResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(in *jlexer.Lexer, out *CreatePolicyPackResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int(in.Int())
		case "uploadURI":
			out.UploadURI = string(in.String())
		case "requiredHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.RequiredHeaders = make(map[string]string)
				} else {
					out.RequiredHeaders = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v30 string
					v30 = string(in.String())
					(out.RequiredHeaders)[key] = v30
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(out *jwriter.Writer, in CreatePolicyPackResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"uploadURI\":"
		out.RawString(prefix)
		out.String(string(in.UploadURI))
	}
	if len(in.RequiredHeaders) != 0 {
		const prefix string = ",\"requiredHeaders\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.RequiredHeaders {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v31Name))
				out.RawByte(':')
				out.String(string(v31Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatePolicyPackResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatePolicyPackResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatePolicyPackResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatePolicyPackResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(l, v)
}
func easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(in *jlexer.Lexer, out *CreatePolicyPackRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "versionTag":
			out.VersionTag = string(in.String())
		case "policies":
			if in.IsNull() {
				in.Skip()
				out.Policies = nil
			} else {
				in.Delim('[')
				if out.Policies == nil {
					if !in.IsDelim(']') {
						out.Policies = make([]Policy, 0, 0)
					} else {
						out.Policies = []Policy{}
					}
				} else {
					out.Policies = (out.Policies)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Policy
					(v32).UnmarshalEasyJSON(in)
					out.Policies = append(out.Policies, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(out *jwriter.Writer, in CreatePolicyPackRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	if in.VersionTag != "" {
		const prefix string = ",\"versionTag\":"
		out.RawString(prefix)
		out.String(string(in.VersionTag))
	}
	{
		const prefix string = ",\"policies\":"
		out.RawString(prefix)
		if in.Policies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Policies {
				if v33 > 0 {
					out.RawByte(',')
				}
				(v34).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatePolicyPackRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatePolicyPackRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC60a78c2EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatePolicyPackRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatePolicyPackRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC60a78c2DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(l, v)
}
