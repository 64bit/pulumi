// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apitype

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	colors "github.com/pulumi/pulumi/sdk/v3/go/common/diag/colors"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(in *jlexer.Lexer, out *UpdateResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = UpdateStatus(in.String())
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]UpdateEvent, 0, 1)
					} else {
						out.Events = []UpdateEvent{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UpdateEvent
					(v1).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "continuationToken":
			if in.IsNull() {
				in.Skip()
				out.ContinuationToken = nil
			} else {
				if out.ContinuationToken == nil {
					out.ContinuationToken = new(string)
				}
				*out.ContinuationToken = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(out *jwriter.Writer, in UpdateResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Events {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ContinuationToken != nil {
		const prefix string = ",\"continuationToken\":"
		out.RawString(prefix)
		out.String(string(*in.ContinuationToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(in *jlexer.Lexer, out *UpdateProgramResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "updateID":
			out.UpdateID = string(in.String())
		case "requiredPolicies":
			if in.IsNull() {
				in.Skip()
				out.RequiredPolicies = nil
			} else {
				in.Delim('[')
				if out.RequiredPolicies == nil {
					if !in.IsDelim(']') {
						out.RequiredPolicies = make([]RequiredPolicy, 0, 0)
					} else {
						out.RequiredPolicies = []RequiredPolicy{}
					}
				} else {
					out.RequiredPolicies = (out.RequiredPolicies)[:0]
				}
				for !in.IsDelim(']') {
					var v4 RequiredPolicy
					(v4).UnmarshalEasyJSON(in)
					out.RequiredPolicies = append(out.RequiredPolicies, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(out *jwriter.Writer, in UpdateProgramResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"updateID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UpdateID))
	}
	if len(in.RequiredPolicies) != 0 {
		const prefix string = ",\"requiredPolicies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.RequiredPolicies {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateProgramResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateProgramResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateProgramResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateProgramResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(in *jlexer.Lexer, out *UpdateProgramRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "runtime":
			out.Runtime = string(in.String())
		case "main":
			out.Main = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "options":
			(out.Options).UnmarshalEasyJSON(in)
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Config = make(map[string]ConfigValue)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 ConfigValue
					(v7).UnmarshalEasyJSON(in)
					(out.Config)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(out *jwriter.Writer, in UpdateProgramRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"runtime\":"
		out.RawString(prefix)
		out.String(string(in.Runtime))
	}
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix)
		out.String(string(in.Main))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		(in.Options).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Config {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				(v8Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		(in.Metadata).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateProgramRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateProgramRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateProgramRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateProgramRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(in *jlexer.Lexer, out *UpdateProgram) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "runtime":
			out.Runtime = string(in.String())
		case "main":
			out.Main = string(in.String())
		case "analyzers":
			if in.IsNull() {
				in.Skip()
				out.Analyzers = nil
			} else {
				in.Delim('[')
				if out.Analyzers == nil {
					if !in.IsDelim(']') {
						out.Analyzers = make([]string, 0, 4)
					} else {
						out.Analyzers = []string{}
					}
				} else {
					out.Analyzers = (out.Analyzers)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Analyzers = append(out.Analyzers, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "destroy":
			out.Destroy = bool(in.Bool())
		case "refresh":
			out.Refresh = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(out *jwriter.Writer, in UpdateProgram) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"runtime\":"
		out.RawString(prefix)
		out.String(string(in.Runtime))
	}
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix)
		out.String(string(in.Main))
	}
	{
		const prefix string = ",\"analyzers\":"
		out.RawString(prefix)
		if in.Analyzers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Analyzers {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"destroy\":"
		out.RawString(prefix)
		out.Bool(bool(in.Destroy))
	}
	{
		const prefix string = ",\"refresh\":"
		out.RawString(prefix)
		out.Bool(bool(in.Refresh))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateProgram) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateProgram) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateProgram) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateProgram) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(in *jlexer.Lexer, out *UpdateOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "localPolicyPackPaths":
			if in.IsNull() {
				in.Skip()
				out.LocalPolicyPackPaths = nil
			} else {
				in.Delim('[')
				if out.LocalPolicyPackPaths == nil {
					if !in.IsDelim(']') {
						out.LocalPolicyPackPaths = make([]string, 0, 4)
					} else {
						out.LocalPolicyPackPaths = []string{}
					}
				} else {
					out.LocalPolicyPackPaths = (out.LocalPolicyPackPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.LocalPolicyPackPaths = append(out.LocalPolicyPackPaths, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "color":
			out.Color = colors.Colorization(in.String())
		case "dryRun":
			out.DryRun = bool(in.Bool())
		case "parallel":
			out.Parallel = int(in.Int())
		case "showConfig":
			out.ShowConfig = bool(in.Bool())
		case "showReplacementSteps":
			out.ShowReplacementSteps = bool(in.Bool())
		case "showNames":
			out.ShowSames = bool(in.Bool())
		case "summary":
			out.Summary = bool(in.Bool())
		case "debug":
			out.Debug = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(out *jwriter.Writer, in UpdateOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"localPolicyPackPaths\":"
		out.RawString(prefix[1:])
		if in.LocalPolicyPackPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.LocalPolicyPackPaths {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"dryRun\":"
		out.RawString(prefix)
		out.Bool(bool(in.DryRun))
	}
	{
		const prefix string = ",\"parallel\":"
		out.RawString(prefix)
		out.Int(int(in.Parallel))
	}
	{
		const prefix string = ",\"showConfig\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowConfig))
	}
	{
		const prefix string = ",\"showReplacementSteps\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowReplacementSteps))
	}
	{
		const prefix string = ",\"showNames\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowSames))
	}
	{
		const prefix string = ",\"summary\":"
		out.RawString(prefix)
		out.Bool(bool(in.Summary))
	}
	{
		const prefix string = ",\"debug\":"
		out.RawString(prefix)
		out.Bool(bool(in.Debug))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(in *jlexer.Lexer, out *UpdateMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "environment":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Environment = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 string
					v15 = string(in.String())
					(out.Environment)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(out *jwriter.Writer, in UpdateMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"environment\":"
		out.RawString(prefix)
		if in.Environment == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Environment {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(in *jlexer.Lexer, out *UpdateEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = string(in.String())
		case "kind":
			out.Kind = UpdateEventKind(in.String())
		case "fields":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Fields = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 interface{}
					if m, ok := v17.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v17.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v17 = in.Interface()
					}
					(out.Fields)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(out *jwriter.Writer, in UpdateEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix[1:])
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Fields {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				if m, ok := v18Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v18Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v18Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(in *jlexer.Lexer, out *StartUpdateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int(in.Int())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(out *jwriter.Writer, in StartUpdateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Version))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartUpdateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartUpdateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartUpdateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartUpdateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(in *jlexer.Lexer, out *StartUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Tags)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(out *jwriter.Writer, in StartUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Tags {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.String(string(v20Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(in *jlexer.Lexer, out *StackRenameRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newName":
			out.NewName = string(in.String())
		case "newProject":
			out.NewProject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(out *jwriter.Writer, in StackRenameRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newName\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewName))
	}
	{
		const prefix string = ",\"newProject\":"
		out.RawString(prefix)
		out.String(string(in.NewProject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StackRenameRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StackRenameRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StackRenameRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StackRenameRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(in *jlexer.Lexer, out *RenewUpdateLeaseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(out *jwriter.Writer, in RenewUpdateLeaseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RenewUpdateLeaseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RenewUpdateLeaseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RenewUpdateLeaseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RenewUpdateLeaseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(in *jlexer.Lexer, out *RenewUpdateLeaseRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(out *jwriter.Writer, in RenewUpdateLeaseRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RenewUpdateLeaseRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RenewUpdateLeaseRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RenewUpdateLeaseRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RenewUpdateLeaseRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(in *jlexer.Lexer, out *PatchUpdateCheckpointRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isInvalid":
			out.IsInvalid = bool(in.Bool())
		case "version":
			out.Version = int(in.Int())
		case "deployment":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deployment).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(out *jwriter.Writer, in PatchUpdateCheckpointRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isInvalid\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsInvalid))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	if len(in.Deployment) != 0 {
		const prefix string = ",\"deployment\":"
		out.RawString(prefix)
		out.Raw((in.Deployment).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PatchUpdateCheckpointRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PatchUpdateCheckpointRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PatchUpdateCheckpointRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PatchUpdateCheckpointRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(in *jlexer.Lexer, out *CreateUpdateConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contents":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Contents = make(map[string]ConfigValue)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 ConfigValue
					(v21).UnmarshalEasyJSON(in)
					(out.Contents)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(out *jwriter.Writer, in CreateUpdateConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contents\":"
		out.RawString(prefix[1:])
		if in.Contents == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Contents {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				(v22Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateUpdateConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateUpdateConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateUpdateConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateUpdateConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(in *jlexer.Lexer, out *CompleteUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = UpdateStatus(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(out *jwriter.Writer, in CompleteUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompleteUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompleteUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompleteUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompleteUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(l, v)
}
func easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype15(in *jlexer.Lexer, out *AppendUpdateLogEntryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		case "fields":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Fields = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 interface{}
					if m, ok := v23.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v23.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v23 = in.Interface()
					}
					(out.Fields)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype15(out *jwriter.Writer, in AppendUpdateLogEntryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Fields {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				if m, ok := v24Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v24Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v24Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppendUpdateLogEntryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppendUpdateLogEntryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFed0a050EncodeGithubComPulumiPulumiSdkV3GoCommonApitype15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppendUpdateLogEntryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppendUpdateLogEntryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFed0a050DecodeGithubComPulumiPulumiSdkV3GoCommonApitype15(l, v)
}
