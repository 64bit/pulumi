// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apitype

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	resource "github.com/pulumi/pulumi/sdk/v3/go/common/resource"
	tokens "github.com/pulumi/pulumi/sdk/v3/go/common/tokens"
	workspace "github.com/pulumi/pulumi/sdk/v3/go/common/workspace"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(in *jlexer.Lexer, out *VersionedCheckpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int(in.Int())
		case "checkpoint":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Checkpoint).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(out *jwriter.Writer, in VersionedCheckpoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"checkpoint\":"
		out.RawString(prefix)
		out.Raw((in.Checkpoint).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VersionedCheckpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VersionedCheckpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VersionedCheckpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VersionedCheckpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(in *jlexer.Lexer, out *UntypedDeployment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int(in.Int())
		case "deployment":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deployment).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(out *jwriter.Writer, in UntypedDeployment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Version))
	}
	if len(in.Deployment) != 0 {
		const prefix string = ",\"deployment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Deployment).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UntypedDeployment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UntypedDeployment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UntypedDeployment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UntypedDeployment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype1(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(in *jlexer.Lexer, out *Stack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orgName":
			out.OrgName = string(in.String())
		case "projectName":
			out.ProjectName = string(in.String())
		case "stackName":
			out.StackName = tokens.QName(in.String())
		case "currentOperation":
			if in.IsNull() {
				in.Skip()
				out.CurrentOperation = nil
			} else {
				if out.CurrentOperation == nil {
					out.CurrentOperation = new(OperationStatus)
				}
				(*out.CurrentOperation).UnmarshalEasyJSON(in)
			}
		case "activeUpdate":
			out.ActiveUpdate = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Tags)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "version":
			out.Version = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(out *jwriter.Writer, in Stack) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orgName\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrgName))
	}
	{
		const prefix string = ",\"projectName\":"
		out.RawString(prefix)
		out.String(string(in.ProjectName))
	}
	{
		const prefix string = ",\"stackName\":"
		out.RawString(prefix)
		out.String(string(in.StackName))
	}
	if in.CurrentOperation != nil {
		const prefix string = ",\"currentOperation\":"
		out.RawString(prefix)
		(*in.CurrentOperation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"activeUpdate\":"
		out.RawString(prefix)
		out.String(string(in.ActiveUpdate))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Tags {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype2(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(in *jlexer.Lexer, out *SecretsProvidersV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "state":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.State).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(out *jwriter.Writer, in SecretsProvidersV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if len(in.State) != 0 {
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Raw((in.State).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SecretsProvidersV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SecretsProvidersV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SecretsProvidersV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SecretsProvidersV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype3(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(in *jlexer.Lexer, out *SecretV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "4dabf18193072939515e22adb298388d":
			out.Sig = string(in.String())
		case "ciphertext":
			out.Ciphertext = string(in.String())
		case "plaintext":
			out.Plaintext = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(out *jwriter.Writer, in SecretV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"4dabf18193072939515e22adb298388d\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sig))
	}
	if in.Ciphertext != "" {
		const prefix string = ",\"ciphertext\":"
		out.RawString(prefix)
		out.String(string(in.Ciphertext))
	}
	if in.Plaintext != "" {
		const prefix string = ",\"plaintext\":"
		out.RawString(prefix)
		out.String(string(in.Plaintext))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SecretV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SecretV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SecretV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SecretV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype4(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(in *jlexer.Lexer, out *ResourceV3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urn":
			out.URN = resource.URN(in.String())
		case "custom":
			out.Custom = bool(in.Bool())
		case "delete":
			out.Delete = bool(in.Bool())
		case "id":
			out.ID = resource.ID(in.String())
		case "type":
			out.Type = tokens.Type(in.String())
		case "inputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Inputs = make(map[string]interface{})
				} else {
					out.Inputs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.Inputs)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "outputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Outputs = make(map[string]interface{})
				} else {
					out.Outputs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Outputs)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "parent":
			out.Parent = resource.URN(in.String())
		case "protect":
			out.Protect = bool(in.Bool())
		case "external":
			out.External = bool(in.Bool())
		case "dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]resource.URN, 0, 4)
					} else {
						out.Dependencies = []resource.URN{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v5 resource.URN
					v5 = resource.URN(in.String())
					out.Dependencies = append(out.Dependencies, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "initErrors":
			if in.IsNull() {
				in.Skip()
				out.InitErrors = nil
			} else {
				in.Delim('[')
				if out.InitErrors == nil {
					if !in.IsDelim(']') {
						out.InitErrors = make([]string, 0, 4)
					} else {
						out.InitErrors = []string{}
					}
				} else {
					out.InitErrors = (out.InitErrors)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.InitErrors = append(out.InitErrors, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provider":
			out.Provider = string(in.String())
		case "propertyDependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PropertyDependencies = make(map[resource.PropertyKey][]resource.URN)
				} else {
					out.PropertyDependencies = nil
				}
				for !in.IsDelim('}') {
					key := resource.PropertyKey(in.String())
					in.WantColon()
					var v7 []resource.URN
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						in.Delim('[')
						if v7 == nil {
							if !in.IsDelim(']') {
								v7 = make([]resource.URN, 0, 4)
							} else {
								v7 = []resource.URN{}
							}
						} else {
							v7 = (v7)[:0]
						}
						for !in.IsDelim(']') {
							var v8 resource.URN
							v8 = resource.URN(in.String())
							v7 = append(v7, v8)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.PropertyDependencies)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pendingReplacement":
			out.PendingReplacement = bool(in.Bool())
		case "additionalSecretOutputs":
			if in.IsNull() {
				in.Skip()
				out.AdditionalSecretOutputs = nil
			} else {
				in.Delim('[')
				if out.AdditionalSecretOutputs == nil {
					if !in.IsDelim(']') {
						out.AdditionalSecretOutputs = make([]resource.PropertyKey, 0, 4)
					} else {
						out.AdditionalSecretOutputs = []resource.PropertyKey{}
					}
				} else {
					out.AdditionalSecretOutputs = (out.AdditionalSecretOutputs)[:0]
				}
				for !in.IsDelim(']') {
					var v9 resource.PropertyKey
					v9 = resource.PropertyKey(in.String())
					out.AdditionalSecretOutputs = append(out.AdditionalSecretOutputs, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]resource.URN, 0, 4)
					} else {
						out.Aliases = []resource.URN{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v10 resource.URN
					v10 = resource.URN(in.String())
					out.Aliases = append(out.Aliases, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customTimeouts":
			if in.IsNull() {
				in.Skip()
				out.CustomTimeouts = nil
			} else {
				if out.CustomTimeouts == nil {
					out.CustomTimeouts = new(resource.CustomTimeouts)
				}
				easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonResource(in, out.CustomTimeouts)
			}
		case "importID":
			out.ImportID = resource.ID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(out *jwriter.Writer, in ResourceV3) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urn\":"
		out.RawString(prefix[1:])
		out.String(string(in.URN))
	}
	{
		const prefix string = ",\"custom\":"
		out.RawString(prefix)
		out.Bool(bool(in.Custom))
	}
	if in.Delete {
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.Delete))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if len(in.Inputs) != 0 {
		const prefix string = ",\"inputs\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Inputs {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if m, ok := v11Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v11Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v11Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Outputs) != 0 {
		const prefix string = ",\"outputs\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Outputs {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if m, ok := v12Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Parent != "" {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	}
	if in.Protect {
		const prefix string = ",\"protect\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protect))
	}
	if in.External {
		const prefix string = ",\"external\":"
		out.RawString(prefix)
		out.Bool(bool(in.External))
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.Dependencies {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.InitErrors) != 0 {
		const prefix string = ",\"initErrors\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.InitErrors {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if in.Provider != "" {
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	if len(in.PropertyDependencies) != 0 {
		const prefix string = ",\"propertyDependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.PropertyDependencies {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				if v17Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v18, v19 := range v17Value {
						if v18 > 0 {
							out.RawByte(',')
						}
						out.String(string(v19))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if in.PendingReplacement {
		const prefix string = ",\"pendingReplacement\":"
		out.RawString(prefix)
		out.Bool(bool(in.PendingReplacement))
	}
	if len(in.AdditionalSecretOutputs) != 0 {
		const prefix string = ",\"additionalSecretOutputs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.AdditionalSecretOutputs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if len(in.Aliases) != 0 {
		const prefix string = ",\"aliases\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v22, v23 := range in.Aliases {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if in.CustomTimeouts != nil {
		const prefix string = ",\"customTimeouts\":"
		out.RawString(prefix)
		easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonResource(out, *in.CustomTimeouts)
	}
	if in.ImportID != "" {
		const prefix string = ",\"importID\":"
		out.RawString(prefix)
		out.String(string(in.ImportID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceV3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceV3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceV3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceV3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype5(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonResource(in *jlexer.Lexer, out *resource.CustomTimeouts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create":
			out.Create = float64(in.Float64())
		case "update":
			out.Update = float64(in.Float64())
		case "delete":
			out.Delete = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonResource(out *jwriter.Writer, in resource.CustomTimeouts) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Create != 0 {
		const prefix string = ",\"create\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Create))
	}
	if in.Update != 0 {
		const prefix string = ",\"update\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Update))
	}
	if in.Delete != 0 {
		const prefix string = ",\"delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Delete))
	}
	out.RawByte('}')
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(in *jlexer.Lexer, out *ResourceV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urn":
			out.URN = resource.URN(in.String())
		case "custom":
			out.Custom = bool(in.Bool())
		case "delete":
			out.Delete = bool(in.Bool())
		case "id":
			out.ID = resource.ID(in.String())
		case "type":
			out.Type = tokens.Type(in.String())
		case "inputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Inputs = make(map[string]interface{})
				} else {
					out.Inputs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v24 interface{}
					if m, ok := v24.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v24.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v24 = in.Interface()
					}
					(out.Inputs)[key] = v24
					in.WantComma()
				}
				in.Delim('}')
			}
		case "outputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Outputs = make(map[string]interface{})
				} else {
					out.Outputs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 interface{}
					if m, ok := v25.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v25.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v25 = in.Interface()
					}
					(out.Outputs)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "parent":
			out.Parent = resource.URN(in.String())
		case "protect":
			out.Protect = bool(in.Bool())
		case "external":
			out.External = bool(in.Bool())
		case "dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]resource.URN, 0, 4)
					} else {
						out.Dependencies = []resource.URN{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v26 resource.URN
					v26 = resource.URN(in.String())
					out.Dependencies = append(out.Dependencies, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "initErrors":
			if in.IsNull() {
				in.Skip()
				out.InitErrors = nil
			} else {
				in.Delim('[')
				if out.InitErrors == nil {
					if !in.IsDelim(']') {
						out.InitErrors = make([]string, 0, 4)
					} else {
						out.InitErrors = []string{}
					}
				} else {
					out.InitErrors = (out.InitErrors)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.InitErrors = append(out.InitErrors, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provider":
			out.Provider = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(out *jwriter.Writer, in ResourceV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urn\":"
		out.RawString(prefix[1:])
		out.String(string(in.URN))
	}
	{
		const prefix string = ",\"custom\":"
		out.RawString(prefix)
		out.Bool(bool(in.Custom))
	}
	if in.Delete {
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.Delete))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if len(in.Inputs) != 0 {
		const prefix string = ",\"inputs\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Inputs {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				if m, ok := v28Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v28Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v28Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Outputs) != 0 {
		const prefix string = ",\"outputs\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.Outputs {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v29Name))
				out.RawByte(':')
				if m, ok := v29Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v29Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v29Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Parent != "" {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	}
	if in.Protect {
		const prefix string = ",\"protect\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protect))
	}
	if in.External {
		const prefix string = ",\"external\":"
		out.RawString(prefix)
		out.Bool(bool(in.External))
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.Dependencies {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.InitErrors) != 0 {
		const prefix string = ",\"initErrors\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.InitErrors {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Provider != "" {
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype6(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(in *jlexer.Lexer, out *ResourceV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urn":
			out.URN = resource.URN(in.String())
		case "custom":
			out.Custom = bool(in.Bool())
		case "delete":
			out.Delete = bool(in.Bool())
		case "id":
			out.ID = resource.ID(in.String())
		case "type":
			out.Type = tokens.Type(in.String())
		case "inputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Inputs = make(map[string]interface{})
				} else {
					out.Inputs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v34 interface{}
					if m, ok := v34.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v34.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v34 = in.Interface()
					}
					(out.Inputs)[key] = v34
					in.WantComma()
				}
				in.Delim('}')
			}
		case "defaults":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Defaults = make(map[string]interface{})
				} else {
					out.Defaults = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 interface{}
					if m, ok := v35.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v35.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v35 = in.Interface()
					}
					(out.Defaults)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "outputs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Outputs = make(map[string]interface{})
				} else {
					out.Outputs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v36 interface{}
					if m, ok := v36.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v36.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v36 = in.Interface()
					}
					(out.Outputs)[key] = v36
					in.WantComma()
				}
				in.Delim('}')
			}
		case "parent":
			out.Parent = resource.URN(in.String())
		case "protect":
			out.Protect = bool(in.Bool())
		case "dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]resource.URN, 0, 4)
					} else {
						out.Dependencies = []resource.URN{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v37 resource.URN
					v37 = resource.URN(in.String())
					out.Dependencies = append(out.Dependencies, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "initErrors":
			if in.IsNull() {
				in.Skip()
				out.InitErrors = nil
			} else {
				in.Delim('[')
				if out.InitErrors == nil {
					if !in.IsDelim(']') {
						out.InitErrors = make([]string, 0, 4)
					} else {
						out.InitErrors = []string{}
					}
				} else {
					out.InitErrors = (out.InitErrors)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.InitErrors = append(out.InitErrors, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(out *jwriter.Writer, in ResourceV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urn\":"
		out.RawString(prefix[1:])
		out.String(string(in.URN))
	}
	{
		const prefix string = ",\"custom\":"
		out.RawString(prefix)
		out.Bool(bool(in.Custom))
	}
	if in.Delete {
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.Delete))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if len(in.Inputs) != 0 {
		const prefix string = ",\"inputs\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v39First := true
			for v39Name, v39Value := range in.Inputs {
				if v39First {
					v39First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v39Name))
				out.RawByte(':')
				if m, ok := v39Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v39Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v39Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Defaults) != 0 {
		const prefix string = ",\"defaults\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.Defaults {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v40Name))
				out.RawByte(':')
				if m, ok := v40Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v40Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v40Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Outputs) != 0 {
		const prefix string = ",\"outputs\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.Outputs {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v41Name))
				out.RawByte(':')
				if m, ok := v41Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v41Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v41Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Parent != "" {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	}
	if in.Protect {
		const prefix string = ",\"protect\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protect))
	}
	{
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		if in.Dependencies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Dependencies {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"initErrors\":"
		out.RawString(prefix)
		if in.InitErrors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.InitErrors {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype7(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(in *jlexer.Lexer, out *PluginInfoV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "type":
			out.Type = workspace.PluginKind(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(out *jwriter.Writer, in PluginInfoV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PluginInfoV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PluginInfoV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PluginInfoV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PluginInfoV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype8(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(in *jlexer.Lexer, out *OperationV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			(out.Resource).UnmarshalEasyJSON(in)
		case "type":
			out.Type = OperationType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(out *jwriter.Writer, in OperationV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix[1:])
		(in.Resource).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OperationV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OperationV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OperationV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OperationV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype9(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(in *jlexer.Lexer, out *OperationV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			(out.Resource).UnmarshalEasyJSON(in)
		case "type":
			out.Type = OperationType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(out *jwriter.Writer, in OperationV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix[1:])
		(in.Resource).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OperationV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OperationV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OperationV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OperationV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype10(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(in *jlexer.Lexer, out *OperationStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = UpdateKind(in.String())
		case "author":
			out.Author = string(in.String())
		case "started":
			out.Started = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(out *jwriter.Writer, in OperationStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"started\":"
		out.RawString(prefix)
		out.Int64(int64(in.Started))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OperationStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OperationStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OperationStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OperationStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype11(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(in *jlexer.Lexer, out *ManifestV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "magic":
			out.Magic = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "plugins":
			if in.IsNull() {
				in.Skip()
				out.Plugins = nil
			} else {
				in.Delim('[')
				if out.Plugins == nil {
					if !in.IsDelim(']') {
						out.Plugins = make([]PluginInfoV1, 0, 1)
					} else {
						out.Plugins = []PluginInfoV1{}
					}
				} else {
					out.Plugins = (out.Plugins)[:0]
				}
				for !in.IsDelim(']') {
					var v46 PluginInfoV1
					(v46).UnmarshalEasyJSON(in)
					out.Plugins = append(out.Plugins, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(out *jwriter.Writer, in ManifestV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"magic\":"
		out.RawString(prefix)
		out.String(string(in.Magic))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if len(in.Plugins) != 0 {
		const prefix string = ",\"plugins\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v47, v48 := range in.Plugins {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype12(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(in *jlexer.Lexer, out *DeploymentV3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manifest":
			(out.Manifest).UnmarshalEasyJSON(in)
		case "secrets_providers":
			if in.IsNull() {
				in.Skip()
				out.SecretsProviders = nil
			} else {
				if out.SecretsProviders == nil {
					out.SecretsProviders = new(SecretsProvidersV1)
				}
				(*out.SecretsProviders).UnmarshalEasyJSON(in)
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]ResourceV3, 0, 0)
					} else {
						out.Resources = []ResourceV3{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v49 ResourceV3
					(v49).UnmarshalEasyJSON(in)
					out.Resources = append(out.Resources, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pending_operations":
			if in.IsNull() {
				in.Skip()
				out.PendingOperations = nil
			} else {
				in.Delim('[')
				if out.PendingOperations == nil {
					if !in.IsDelim(']') {
						out.PendingOperations = make([]OperationV2, 0, 0)
					} else {
						out.PendingOperations = []OperationV2{}
					}
				} else {
					out.PendingOperations = (out.PendingOperations)[:0]
				}
				for !in.IsDelim(']') {
					var v50 OperationV2
					(v50).UnmarshalEasyJSON(in)
					out.PendingOperations = append(out.PendingOperations, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(out *jwriter.Writer, in DeploymentV3) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"manifest\":"
		out.RawString(prefix[1:])
		(in.Manifest).MarshalEasyJSON(out)
	}
	if in.SecretsProviders != nil {
		const prefix string = ",\"secrets_providers\":"
		out.RawString(prefix)
		(*in.SecretsProviders).MarshalEasyJSON(out)
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v51, v52 := range in.Resources {
				if v51 > 0 {
					out.RawByte(',')
				}
				(v52).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.PendingOperations) != 0 {
		const prefix string = ",\"pending_operations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v53, v54 := range in.PendingOperations {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeploymentV3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeploymentV3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeploymentV3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeploymentV3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype13(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(in *jlexer.Lexer, out *DeploymentV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manifest":
			(out.Manifest).UnmarshalEasyJSON(in)
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]ResourceV2, 0, 0)
					} else {
						out.Resources = []ResourceV2{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v55 ResourceV2
					(v55).UnmarshalEasyJSON(in)
					out.Resources = append(out.Resources, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pending_operations":
			if in.IsNull() {
				in.Skip()
				out.PendingOperations = nil
			} else {
				in.Delim('[')
				if out.PendingOperations == nil {
					if !in.IsDelim(']') {
						out.PendingOperations = make([]OperationV1, 0, 0)
					} else {
						out.PendingOperations = []OperationV1{}
					}
				} else {
					out.PendingOperations = (out.PendingOperations)[:0]
				}
				for !in.IsDelim(']') {
					var v56 OperationV1
					(v56).UnmarshalEasyJSON(in)
					out.PendingOperations = append(out.PendingOperations, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(out *jwriter.Writer, in DeploymentV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"manifest\":"
		out.RawString(prefix[1:])
		(in.Manifest).MarshalEasyJSON(out)
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v57, v58 := range in.Resources {
				if v57 > 0 {
					out.RawByte(',')
				}
				(v58).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.PendingOperations) != 0 {
		const prefix string = ",\"pending_operations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v59, v60 := range in.PendingOperations {
				if v59 > 0 {
					out.RawByte(',')
				}
				(v60).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeploymentV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeploymentV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeploymentV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeploymentV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype14(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype15(in *jlexer.Lexer, out *DeploymentV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manifest":
			(out.Manifest).UnmarshalEasyJSON(in)
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]ResourceV1, 0, 0)
					} else {
						out.Resources = []ResourceV1{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v61 ResourceV1
					(v61).UnmarshalEasyJSON(in)
					out.Resources = append(out.Resources, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype15(out *jwriter.Writer, in DeploymentV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"manifest\":"
		out.RawString(prefix[1:])
		(in.Manifest).MarshalEasyJSON(out)
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v62, v63 := range in.Resources {
				if v62 > 0 {
					out.RawByte(',')
				}
				(v63).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeploymentV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeploymentV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeploymentV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeploymentV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype15(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype16(in *jlexer.Lexer, out *ConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "string":
			out.String = string(in.String())
		case "secret":
			out.Secret = bool(in.Bool())
		case "object":
			out.Object = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype16(out *jwriter.Writer, in ConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"string\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.Bool(bool(in.Secret))
	}
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix)
		out.Bool(bool(in.Object))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfigValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfigValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfigValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfigValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype16(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype17(in *jlexer.Lexer, out *CheckpointV3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stack":
			out.Stack = tokens.QName(in.String())
		case "config":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Config).UnmarshalJSON(data))
			}
		case "latest":
			if in.IsNull() {
				in.Skip()
				out.Latest = nil
			} else {
				if out.Latest == nil {
					out.Latest = new(DeploymentV3)
				}
				(*out.Latest).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype17(out *jwriter.Writer, in CheckpointV3) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stack\":"
		out.RawString(prefix[1:])
		out.String(string(in.Stack))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		out.Raw((in.Config).MarshalJSON())
	}
	if in.Latest != nil {
		const prefix string = ",\"latest\":"
		out.RawString(prefix)
		(*in.Latest).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckpointV3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckpointV3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckpointV3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckpointV3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype17(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype18(in *jlexer.Lexer, out *CheckpointV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stack":
			out.Stack = tokens.QName(in.String())
		case "config":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Config).UnmarshalJSON(data))
			}
		case "latest":
			if in.IsNull() {
				in.Skip()
				out.Latest = nil
			} else {
				if out.Latest == nil {
					out.Latest = new(DeploymentV2)
				}
				(*out.Latest).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype18(out *jwriter.Writer, in CheckpointV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stack\":"
		out.RawString(prefix[1:])
		out.String(string(in.Stack))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		out.Raw((in.Config).MarshalJSON())
	}
	if in.Latest != nil {
		const prefix string = ",\"latest\":"
		out.RawString(prefix)
		(*in.Latest).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckpointV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckpointV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckpointV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckpointV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype18(l, v)
}
func easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype19(in *jlexer.Lexer, out *CheckpointV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stack":
			out.Stack = tokens.QName(in.String())
		case "config":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Config).UnmarshalJSON(data))
			}
		case "latest":
			if in.IsNull() {
				in.Skip()
				out.Latest = nil
			} else {
				if out.Latest == nil {
					out.Latest = new(DeploymentV1)
				}
				(*out.Latest).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype19(out *jwriter.Writer, in CheckpointV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stack\":"
		out.RawString(prefix[1:])
		out.String(string(in.Stack))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		out.Raw((in.Config).MarshalJSON())
	}
	if in.Latest != nil {
		const prefix string = ",\"latest\":"
		out.RawString(prefix)
		(*in.Latest).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckpointV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckpointV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComPulumiPulumiSdkV3GoCommonApitype19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckpointV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckpointV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComPulumiPulumiSdkV3GoCommonApitype19(l, v)
}
